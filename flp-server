#!/bin/env python3
# -*- coding: utf-8 -*-
import json
import os, sys
import time
from pathlib import Path

import pkg_resources  # part of setuptools

DEFAULT_PORT = "localhost:8000"
DEFAULT_RELOAD = False
DEFAULT_SETTINGS_FILE = "fflp.settings"
DEFAULT_COMMAND="start"
DEFAULT_PIDFILE=Path("/tmp/flp-server.pid")

class _Empty:
    pass

EMPTY=_Empty()
port = EMPTY
reload = EMPTY
settings_file = EMPTY
command = EMPTY
pidfile = EMPTY

config_files = [
    "/etc/flp-server/config.json",
    ".local/share/flp-server/config.json",
    "config/config.json",
    "config.json",
]

default_auth_file = {
    "/etc/flp-server/auth.csv",
    ".local/share/flp-server/auth.csv",
    "config/auth.csv",
    "auth.csv",
}

def get_pid():
    if not pidfile.is_file():
        return None
    try:
        return int(pidfile.read_text())
    except:
        return None

def is_alive():
    try:
        pid = get_pid()
        if pid is None: return False
        os.kill(pid, 0)
    except OSError:
        return False
    return True

def set_pid():
    if not is_alive():
        pidfile.write_text(str(os.getgid()))
    else:
        print(f"Another instance is running with pid {pid}")
        exit(-1)

def print_help(exitcode):
    print("Usage: flp-server [--address | -a ADDR:PORT] [--reload | -r] [--settings-file | -s DJANGO_SETTING_MODULE] "
          "[--confg-file | -c CONFIG_FILE] [--config-key | -k KEY VALUE] [--pid-file | -p PID_FILE] [start | restert | stop | is_alive] ")
    print("Usage: flp-server (--help | -h)")
    print("Usage: flp-server (--version | -v)")
    exit(exitcode)


def start():
    set_pid()
    print(f"listening on {port} {'with autoreload' if reload else ''}")
    call_command('runserver', addrport=port, use_reloader=reload)

def stop():
    pid = get_pid()
    if pid is not None:
        os.kill(pid, 9)
    else:
        print("No instance running")



configs = []
config_file_key = "config.file"
args = [x for x in sys.argv[1:]]

while args:
    current = args.pop(0)
    if current in ("--address", "-a"):
        port = args.pop(0)
    elif current in ("--reload", "-r"):
        reload=True
    elif current in ("--config-file", "-c"):
        config_files.append(args.pop(0))
    elif current in ("--config-key", "-k"):
        configs.append((args.pop(0), args.pop(0)))
    elif current in ("--settings-file", "-s"):
        settings_file=args.pop(0)
    elif current in ("--pid-file", "-p"):
        pidfile = Path(args.pop(0))
    elif current in ("--version", "-v"):
        print(pkg_resources.require("fanfan-la-pouliche")[0].version)
        exit(0)
    elif current in ("--help", "-h"):
        print_help(0)
    else:
        print_help(-1)

settings_file = settings_file if settings_file!=EMPTY else DEFAULT_SETTINGS_FILE
command = command if command!=EMPTY else DEFAULT_COMMAND
os.environ["DJANGO_SETTINGS_MODULE"]=settings_file

from django.conf import settings as djset
from django.apps import apps
apps.populate(djset.INSTALLED_APPS)
from django.core.management import call_command
from website.models.config import config
from django.contrib.auth.models import User

for k, v in configs:
    config.set(k, v)


for cfg in config_files:
    p = Path(cfg)
    if p.is_file():
        try:
            data=json.loads(p.read_text())
            config.load(data)
            print(f"config {p} loaded")
        except json.decoder.JSONDecodeError as err:
            print(f"unable to read config at {p} malformed file : {err}")
    else:
        print(f"unable to read config at {p} not such file")

for auth in default_auth_file:
    p = Path(auth)
    if p.is_file():
        for line in [ x.split(";") for x in p.read_text().split("\n") if x and ";" in x]:
            if len(line)<2: continue
            user = line[0]
            password = line[1]
            email = line[2] if len(line)>2 else None
            try:
                usr = User.objects.get(username=user)
            except User.DoesNotExist:
                User.objects.create_user(user, email, password)
                print(f"Adding user '{user}'")
    else:
        print(f"unable to read auth file at {p} not such file")


port = port if port!=EMPTY else config.get("server.address", DEFAULT_PORT)
reload = reload if reload!=EMPTY else config.get("server.reload", DEFAULT_RELOAD)
pidfile = pidfile if pidfile!=EMPTY else config.get("server.pidfile", DEFAULT_PIDFILE)


if command == "start":
    start()
elif command in ("restart", "reload"):
    stop()
    time.sleep(2)
elif command == "stop":
    stop()
elif command == "is_alive":
    if is_alive():
        print("true")
        exit(0)
    else:
        print("false")
        exit(-1)
else:
    print(f"Commande {command} inconnue")
    exit(-1)
